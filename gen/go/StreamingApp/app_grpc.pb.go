// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: StreamingApp/app.proto

package streamingv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	// Register registers a new user.
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// Login logs in a user and returns an auth token.
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/auth.Auth/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/auth.Auth/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations must embed UnimplementedAuthServer
// for forward compatibility
type AuthServer interface {
	// Register registers a new user.
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	// Login logs in a user and returns an auth token.
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	mustEmbedUnimplementedAuthServer()
}

// UnimplementedAuthServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (UnimplementedAuthServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAuthServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthServer) mustEmbedUnimplementedAuthServer() {}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Auth_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Auth_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "StreamingApp/app.proto",
}

// StreamingServicceClient is the client API for StreamingServicce service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamingServicceClient interface {
	AddGenre(ctx context.Context, in *AddGenreRequest, opts ...grpc.CallOption) (*AddGenreResponse, error)
	GetGenre(ctx context.Context, in *GetGenreRequest, opts ...grpc.CallOption) (*GetGenreResponse, error)
	AddFilm(ctx context.Context, in *AddFilmRequest, opts ...grpc.CallOption) (*AddFilmResponse, error)
	GetAllFilms(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error)
	GetTopFilms(ctx context.Context, in *GetTopRequest, opts ...grpc.CallOption) (*GetTopResponse, error)
	GetFilm(ctx context.Context, in *GetFilmRequest, opts ...grpc.CallOption) (*GetFilmResponse, error)
	GetFilmById(ctx context.Context, in *GetFilmByIdRequest, opts ...grpc.CallOption) (*GetFilmByIdResponse, error)
}

type streamingServicceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamingServicceClient(cc grpc.ClientConnInterface) StreamingServicceClient {
	return &streamingServicceClient{cc}
}

func (c *streamingServicceClient) AddGenre(ctx context.Context, in *AddGenreRequest, opts ...grpc.CallOption) (*AddGenreResponse, error) {
	out := new(AddGenreResponse)
	err := c.cc.Invoke(ctx, "/auth.StreamingServicce/AddGenre", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamingServicceClient) GetGenre(ctx context.Context, in *GetGenreRequest, opts ...grpc.CallOption) (*GetGenreResponse, error) {
	out := new(GetGenreResponse)
	err := c.cc.Invoke(ctx, "/auth.StreamingServicce/GetGenre", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamingServicceClient) AddFilm(ctx context.Context, in *AddFilmRequest, opts ...grpc.CallOption) (*AddFilmResponse, error) {
	out := new(AddFilmResponse)
	err := c.cc.Invoke(ctx, "/auth.StreamingServicce/AddFilm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamingServicceClient) GetAllFilms(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, "/auth.StreamingServicce/GetAllFilms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamingServicceClient) GetTopFilms(ctx context.Context, in *GetTopRequest, opts ...grpc.CallOption) (*GetTopResponse, error) {
	out := new(GetTopResponse)
	err := c.cc.Invoke(ctx, "/auth.StreamingServicce/GetTopFilms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamingServicceClient) GetFilm(ctx context.Context, in *GetFilmRequest, opts ...grpc.CallOption) (*GetFilmResponse, error) {
	out := new(GetFilmResponse)
	err := c.cc.Invoke(ctx, "/auth.StreamingServicce/GetFilm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamingServicceClient) GetFilmById(ctx context.Context, in *GetFilmByIdRequest, opts ...grpc.CallOption) (*GetFilmByIdResponse, error) {
	out := new(GetFilmByIdResponse)
	err := c.cc.Invoke(ctx, "/auth.StreamingServicce/GetFilmById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamingServicceServer is the server API for StreamingServicce service.
// All implementations must embed UnimplementedStreamingServicceServer
// for forward compatibility
type StreamingServicceServer interface {
	AddGenre(context.Context, *AddGenreRequest) (*AddGenreResponse, error)
	GetGenre(context.Context, *GetGenreRequest) (*GetGenreResponse, error)
	AddFilm(context.Context, *AddFilmRequest) (*AddFilmResponse, error)
	GetAllFilms(context.Context, *GetAllRequest) (*GetAllResponse, error)
	GetTopFilms(context.Context, *GetTopRequest) (*GetTopResponse, error)
	GetFilm(context.Context, *GetFilmRequest) (*GetFilmResponse, error)
	GetFilmById(context.Context, *GetFilmByIdRequest) (*GetFilmByIdResponse, error)
	mustEmbedUnimplementedStreamingServicceServer()
}

// UnimplementedStreamingServicceServer must be embedded to have forward compatible implementations.
type UnimplementedStreamingServicceServer struct {
}

func (UnimplementedStreamingServicceServer) AddGenre(context.Context, *AddGenreRequest) (*AddGenreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGenre not implemented")
}
func (UnimplementedStreamingServicceServer) GetGenre(context.Context, *GetGenreRequest) (*GetGenreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGenre not implemented")
}
func (UnimplementedStreamingServicceServer) AddFilm(context.Context, *AddFilmRequest) (*AddFilmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFilm not implemented")
}
func (UnimplementedStreamingServicceServer) GetAllFilms(context.Context, *GetAllRequest) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllFilms not implemented")
}
func (UnimplementedStreamingServicceServer) GetTopFilms(context.Context, *GetTopRequest) (*GetTopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopFilms not implemented")
}
func (UnimplementedStreamingServicceServer) GetFilm(context.Context, *GetFilmRequest) (*GetFilmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilm not implemented")
}
func (UnimplementedStreamingServicceServer) GetFilmById(context.Context, *GetFilmByIdRequest) (*GetFilmByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilmById not implemented")
}
func (UnimplementedStreamingServicceServer) mustEmbedUnimplementedStreamingServicceServer() {}

// UnsafeStreamingServicceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamingServicceServer will
// result in compilation errors.
type UnsafeStreamingServicceServer interface {
	mustEmbedUnimplementedStreamingServicceServer()
}

func RegisterStreamingServicceServer(s grpc.ServiceRegistrar, srv StreamingServicceServer) {
	s.RegisterService(&StreamingServicce_ServiceDesc, srv)
}

func _StreamingServicce_AddGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGenreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamingServicceServer).AddGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.StreamingServicce/AddGenre",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamingServicceServer).AddGenre(ctx, req.(*AddGenreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamingServicce_GetGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGenreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamingServicceServer).GetGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.StreamingServicce/GetGenre",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamingServicceServer).GetGenre(ctx, req.(*GetGenreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamingServicce_AddFilm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFilmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamingServicceServer).AddFilm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.StreamingServicce/AddFilm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamingServicceServer).AddFilm(ctx, req.(*AddFilmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamingServicce_GetAllFilms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamingServicceServer).GetAllFilms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.StreamingServicce/GetAllFilms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamingServicceServer).GetAllFilms(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamingServicce_GetTopFilms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamingServicceServer).GetTopFilms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.StreamingServicce/GetTopFilms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamingServicceServer).GetTopFilms(ctx, req.(*GetTopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamingServicce_GetFilm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamingServicceServer).GetFilm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.StreamingServicce/GetFilm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamingServicceServer).GetFilm(ctx, req.(*GetFilmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamingServicce_GetFilmById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilmByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamingServicceServer).GetFilmById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.StreamingServicce/GetFilmById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamingServicceServer).GetFilmById(ctx, req.(*GetFilmByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StreamingServicce_ServiceDesc is the grpc.ServiceDesc for StreamingServicce service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamingServicce_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.StreamingServicce",
	HandlerType: (*StreamingServicceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddGenre",
			Handler:    _StreamingServicce_AddGenre_Handler,
		},
		{
			MethodName: "GetGenre",
			Handler:    _StreamingServicce_GetGenre_Handler,
		},
		{
			MethodName: "AddFilm",
			Handler:    _StreamingServicce_AddFilm_Handler,
		},
		{
			MethodName: "GetAllFilms",
			Handler:    _StreamingServicce_GetAllFilms_Handler,
		},
		{
			MethodName: "GetTopFilms",
			Handler:    _StreamingServicce_GetTopFilms_Handler,
		},
		{
			MethodName: "GetFilm",
			Handler:    _StreamingServicce_GetFilm_Handler,
		},
		{
			MethodName: "GetFilmById",
			Handler:    _StreamingServicce_GetFilmById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "StreamingApp/app.proto",
}
